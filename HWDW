#1

# №1
class Sauce:
    base = "Olive oil"
    def __init__(self, flavor=None):
        self.flavor = flavor

    def show_my_sauce(self):
        if self.flavor:
            print(f"Соус: {self.flavor}")
        else:
            print(str(Sauce.base))

sauce1 = Sauce("Чесночный")
sauce1.show_my_sauce()  # Вывод: Соус: Чесночный

sauce2 = Sauce()
sauce2.show_my_sauce()  # Вывод: Майонез

# №2

class Employee:
    SALARY = 50000
    def __init__(self, name, age):
        self.name = name         
        self._age = age          
        self.__salary = Employee.SALARY
        self.__bonus = 0
            

    def get_name(self):
        print( self.name)
    
    def get_age(self):
        print( self._age)
    
    def get_salary(self):
        print( self.__salary)
    
    def get_bonus(self):
        print( self.__bonus)
    
    def set_bonus(self, x):
        self.__bonus = x

    def get_total_salary(self):
        print( self.__salary + self.__bonus)
    
pt = Employee('Max',19)
pt.get_name()
pt.get_age()
pt.get_salary()
pt.get_bonus()
pt.set_bonus(99999)
pt.get_total_salary()



# №3

class Recipe:
    def __init__(self, name,ingredients):
        self.name = name         
        self.ingredients = ingredients         

    def print_ingredients(self):
        print(f'Ингредиенты для {self.name}:')
        for i in self.ingredients:
            print(f'- {i}')
    
    def cook(self):
        print( f'Сегодня мы готовим {self.name}.')
        print( f'Выполняем инструкцию по приготовлению блюда {self.name}...')
        print( f'Блюдо {self.name} готово!')

# создаем рецепт спагетти болоньезе
spaghetti = Recipe("Спагетти болоньезе", ["Спагетти", "Фарш", "Томатный соус", "Лук", "Чеснок", "Соль"])

# печатаем список продуктов для рецепта спагетти
spaghetti.print_ingredients()

# готовим спагетти
spaghetti.cook()  

# создаем рецепт для кекса
cake = Recipe("Кекс", ["Мука", "Яйца", "Молоко", "Сахар", "Сливочное масло", "Соль", "Ванилин"])

# печатаем рецепт кекса
cake.print_ingredients()

# готовим кекс
cake.cook()

#2

# №1
class BankAccount:
    def __init__(self, account_number, balance=0.0):
        self.__account_number, self.__balance = account_number, balance

    def deposit(self, amount):
        if amount > 0:
            self.__balance += amount
            return f"Deposited {amount}. New balance: {self.__balance}"
        return "Invalid deposit amount."

    def withdraw(self, amount):
        if amount > 0 and amount <= self.__balance:
            self.__balance -= amount
            return f"Withdrew {amount}. New balance: {self.__balance}"
        return "Invalid or insufficient funds."

    def get_balance(self):
        return f"Account balance: {self.__balance}"

    @classmethod
    def create_empty_account(cls, account_number):
        return cls(account_number)


# Пример использования
account = BankAccount.create_empty_account("12345678")
print(account.deposit(1000))
print(account.withdraw(500))
print(account.get_balance())



# №2
class User:
    def __init__(self, username: str, password: str):
        self.__username = username
        if self.__is_strong_password(password):
            self.__password = password
        else:
            raise ValueError("Пароль слишком простой. Должен быть не менее 6 символов.")

    @staticmethod
    def __is_strong_password(password: str) -> bool:
        return len(password) >= 6

    @classmethod
    def create_with_default_password(cls, username: str):
        return cls(username, "default123")  # Безопасный пароль по умолчанию

    def change_password(self, new_password: str):
        if self.__is_strong_password(new_password):
            self.__password = new_password
            print("Пароль успешно изменён.")
        else:
            print("Ошибка: Новый пароль слишком простой.")

    def get_username(self):
        return self.__username

# Пример использования
user1 = User("Alice", "securePass")
print(user1.get_username())

user2 = User.create_with_default_password("Bob")
print(user2.get_username())

user2.change_password("newpass")  # Ошибка
user2.change_password("strongpassword")  # Успех

class User:
    def __init__(self, username: str, password: str):
        self.__username = username
        if self.__is_strong_password(password):
            self.__password = password
        else:
            raise ValueError("Пароль слишком простой. Должен быть не менее 6 символов.")

    @staticmethod
    def __is_strong_password(password: str) -> bool:
        return len(password) >= 6

    @classmethod
    def create_with_default_password(cls, username: str):
        return cls(username, "default123")  # Безопасный пароль по умолчанию

    def change_password(self, new_password: str):
        if self.__is_strong_password(new_password):
            self.__password = new_password
            print("Пароль успешно изменён.")
        else:
            print("Ошибка: Новый пароль слишком простой.")

    def get_username(self):
        return self.__username

# Пример использования
user1 = User("Alice", "securePass")
print(user1.get_username())

user2 = User.create_with_default_password("Bob")
print(user2.get_username())

user2.change_password("newpass")  # Ошибка
user2.change_password("strongpassword")  # Успех


# №3
class Book:
    def __init__(self, title: str, author: str, year: int):
        if self.__is_valid_year(year):
            self.__title = title
            self.__author = author
            self.__year = year
        else:
            raise ValueError("Некорректный год издания.")

    @staticmethod
    def __is_valid_year(year: int) -> bool:
        from datetime import datetime
        current_year = datetime.now().year
        return isinstance(year, int) and year <= current_year

    @classmethod
    def create_without_year(cls, title: str, author: str):
        return cls(title, author, 2024)

    def get_info(self) -> str:
        return f"{self.__title} - {self.__author} ({self.__year})"

# Пример использования
book1 = Book("1984", "George Orwell", 1949)
print(book1.get_info())

book2 = Book.create_without_year("New Book", "Unknown Author")
print(book2.get_info())

#3

# №1
class Person:
    def __init__(self, name: str, age: int):
        self.name = name
        self.age = age

    def __setattr__(self, key, value):
        if key == "name" and (not isinstance(value, str) or len(value) == 0):
            raise ValueError("Имя не может быть пустым.")
        if key == "age" and (not isinstance(value, (int, float)) or value <= 0):
            raise ValueError("Возраст должен быть положительным числом.")

        super().__setattr__(key, value)


# Примеры использования:
p = Person("John", 25)
p.name = "Alice"
p.age = 30

try:
    p.name = ""
except ValueError as e:
    print(e)

try:
    p.age = -5
except ValueError as e:
    print(e)


# №2
class Counter:
    def __getattribute__(self, name):
        print(f"Доступ к атрибуту {name}")
        try:
            return super().__getattribute__(name)
        except AttributeError:
            return None


# Пример использования:
c = Counter()
c.value = 5         # Атрибут value будет добавлен
print(c.value)      # Выведет: Доступ к атрибуту value → 5
print(c.name)       # Выведет: Доступ к атрибуту name → None


# №3
class Car:
    def __init__(self, make, model):
        self.make = make
        self.model = model

    def __getattr__(self, name):
        return "This attribute is not available"


# Пример использования:
c = Car("Toyota", "Corolla")
print(c.make)
print(c.color)


# №4
class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def __setattr__(self, name, value):
        if name not in ("width", "height"):
            raise AttributeError("Local attributes are not allowed")
        object.__setattr__(self, name, value)


# Пример использования:
r = Rectangle(10, 20)
r.width = 15  # Успешно
r.height = 25  # Успешно

try:
    r.color = 'red'
except AttributeError as e:
    print(e)

#4

import math
import numpy as np
import matplotlib.pyplot as plt


class Derivative:
    def __init__(self, h=1e-5):
        self.h = h

    def __get__(self, instance, owner):

        self.instance = instance
        return self

    def __call__(self, x):
        h = self.h

        return (self.instance(x + h) - self.instance(x - h)) / (2 * h)


class ExponentialFunction:

    derivative = Derivative()

    def __init__(self, a):
        self.a = a

    def __call__(self, x):

        return self.a * math.exp(x)

    def plot(self):

        x = np.linspace(-2, 2, 400)

        y = np.array([self(xi) for xi in x])
        y_prime = np.array([self.derivative(xi) for xi in x])

        # Строим графики
        plt.figure(figsize=(8, 6))
        plt.plot(
            x, y, label=f'f(x) = {self.a} * exp(x)', color='blue', linewidth=(4))
        plt.plot(x, y_prime, label="f'(x)", color='red',
                 linestyle='--', linewidth=(4))
        plt.xlabel('x')
        plt.ylabel('y')
        plt.title('Экспоненциальная функция и её производная')
        plt.legend()
        plt.grid(True)
        plt.show()


# Пример использования:
if __name__ == '__main__':
    exp_func = ExponentialFunction(a=2)
    print(exp_func(0))           
    print(exp_func.derivative(0))
    exp_func.plot()

#5

from math import gcd

class Fraction:
    _cache = {}

    def __new__(cls, numerator: int, denominator: int):
        if denominator == 0:
            raise ZeroDivisionError("Знаменатель не может быть равен нулю")
        common_divisor = gcd(numerator, denominator)
        numerator = (numerator // common_divisor) * (-1 if denominator < 0 else 1)
        denominator = abs(denominator // common_divisor)
        key = (numerator, denominator)
        if key in cls._cache:
            return cls._cache[key]
        instance = super().__new__(cls)
        cls._cache[key] = instance
        return instance

    def __init__(self, numerator: int, denominator: int):
        if hasattr(self, '_initialized'):
            return
        self._numerator, self._denominator = numerator, denominator
        self._initialized = True

    def __str__(self) -> str:
        return f"{self._numerator}/{self._denominator}"

    def _operate(self, other: "Fraction", op) -> "Fraction":
        return Fraction(op(self._numerator * other._denominator, other._numerator * self._denominator),
                        self._denominator * other._denominator)

    def __add__(self, other: "Fraction") -> "Fraction":
        return self._operate(other, lambda x, y: x + y)

    def __sub__(self, other: "Fraction") -> "Fraction":
        return self._operate(other, lambda x, y: x - y)

    def __mul__(self, other: "Fraction") -> "Fraction":
        return Fraction(self._numerator * other._numerator, self._denominator * other._denominator)

    def __truediv__(self, other: "Fraction") -> "Fraction":
        if other._numerator == 0:
            raise ZeroDivisionError("Нельзя делить на дробь с нулевым числителем")
        return Fraction(self._numerator * other._denominator, self._denominator * other._numerator)

    def __eq__(self, other: object) -> bool:
        return isinstance(other, Fraction) and self._numerator == other._numerator and self._denominator == other._denominator

    def __lt__(self, other: "Fraction") -> bool:
        return self._numerator * other._denominator < other._numerator * self._denominator

    def __le__(self, other: "Fraction") -> bool:
        return self < other or self == other

    def __gt__(self, other: "Fraction") -> bool:
        return not (self <= other)

    def __ge__(self, other: "Fraction") -> bool:
        return not (self < other)

    def __hash__(self) -> int:
        return hash((self._numerator, self._denominator))

    @property
    def value(self) -> float:
        return round(self._numerator / self._denominator, 3)

    @classmethod
    def from_float(cls, float_value: float) -> "Fraction":
        denominator = 10 ** 3
        numerator = round(float_value * denominator)
        return cls(numerator, denominator)

    @staticmethod
    def is_fraction(obj) -> bool:
        return isinstance(obj, Fraction)

# Пример использования
f1 = Fraction(1, 2)
f2 = Fraction(2, 4)
f3 = Fraction(3, 4)

print(f"f1: {f1}")            
print(f"f2: {f2}")             
print(f"f1 is f2: {f1 is f2}")  

print(f"f1 + f3: {f1 + f3}")    
print(f"f3 - f1: {f3 - f1}")    
print(f"f1 * f3: {f1 * f3}")    
print(f"f3 / f1: {f3 / f1}")    

print(f"f1.value: {f1.value}")  

# Примеры сравнения
print(f"f1 == f2: {f1 == f2}")  
print(f"f1 < f3: {f1 < f3}")    
print(f"f3 > f1: {f3 > f1}")    

#6

# №1
import math


class Shape:
    def area(self):
        raise NotImplementedError(
            "Метод area() должен быть реализован в подклассе.")

    def perimeter(self):
        raise NotImplementedError("")


class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return math.pi * self.radius ** 2

    def perimeter(self):
        return 2 * math.pi * self.radius


class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height

    def perimeter(self):
        return 2 * (self.width + self.height)

    # Пример использования:
circle = Circle(5)
print("Circle area:", circle.area())
print("Circle perimeter:", circle.perimeter())

rectangle = Rectangle(4, 6)
print("Rectangle area:", rectangle.area())
print("Rectangle perimeter:", rectangle.perimeter())

# №2


class Animal:
    def sound(self):

        return "Неизвестный звук"


class Dog(Animal):
    def sound(self):
        return "Гав-гав"


class Cat(Animal):
    def sound(self):
        return "Мяу"


class Cow(Animal):
    def sound(self):
        return "Муу"


animals = [Dog(), Cat(), Cow()]

for animal in animals:
    print(animal.sound())

#7

# №1
from math import gcd


class Fraction:

    def __init__(self, numerator: int, denominator: int):
        common_divisor = gcd(numerator, denominator)

        self._numerator = (numerator // common_divisor) * \
            (-1 if denominator < 0 else 1)
        self._denominator = abs(denominator // common_divisor)

    def __str__(self) -> str:
        return f"{self._numerator}/{self._denominator}"

    def _operate(self, other: "Fraction", op) -> "Fraction":

        num1, denom1 = self._numerator, self._denominator
        num2, denom2 = other._numerator, other._denominator
        return Fraction(op(num1 * denom2, num2 * denom1), denom1 * denom2)

    def __add__(self, other: "Fraction") -> "Fraction":
        return self._operate(other, lambda x, y: x + y)

    def __sub__(self, other: "Fraction") -> "Fraction":
        return self._operate(other, lambda x, y: x - y)

    def __mul__(self, other: "Fraction") -> "Fraction":
        return Fraction(self._numerator * other._numerator, self._denominator * other._denominator)

    def __truediv__(self, other: "Fraction") -> "Fraction":
        if other._numerator == 0:
            raise ZeroDivisionError(
                "Нельзя делить на дробь с нулевым числителем")
        return Fraction(self._numerator * other._denominator, self._denominator * other._numerator)

    @property
    def value(self) -> float:

        return round(self._numerator / self._denominator, 3)

    @classmethod
    def from_float(cls, float_value: float) -> "Fraction":

        denominator = 10 ** 3
        numerator = round(float_value * denominator)
        return cls(numerator, denominator)

    @staticmethod
    def is_fraction(obj) -> bool:
        return isinstance(obj, Fraction)


f1 = Fraction(1, 2)
f2 = Fraction(3, 4)
print(f1 + f2)  # 5/4
print(f1 - f2)  # -1/4
print(f1 * f2)  # 3/8
print(f1 / f2)  # 2/3
print(f1.value)  # 0.5


# №2

class FractionMatrix:
    def __new__(cls, matrix: list[list["Fraction"]]):
        if not isinstance(matrix, list) or not matrix:
            raise ValueError("Матрица должна быть непустым списком списков")
        row_length = len(matrix[0])
        for row in matrix:
            if not isinstance(row, list) or len(row) != row_length:
                raise ValueError(
                    "Все строки матрицы должны быть списками одинаковой длины")
            for elem in row:
                if not Fraction.is_fraction(elem):
                    raise TypeError(
                        "Все элементы матрицы должны быть экземплярами класса Fraction")
        return super().__new__(cls)

    def __init__(self, matrix: list[list["Fraction"]]):
        self.matrix = matrix
        self.rows = len(matrix)
        self.cols = len(matrix[0])

    def __str__(self) -> str:

        return "\n".join("  ".join(str(elem) for elem in row) for row in self.matrix)

    @staticmethod
    def _compute_determinant(matrix: list[list["Fraction"]]) -> "Fraction":
        n = len(matrix)

        if n == 1:
            return matrix[0][0]
        if n == 2:
            return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]
        det = Fraction(0, 1)
        for col in range(n):

            submatrix = [
                [matrix[i][j] for j in range(n) if j != col]
                for i in range(1, n)
            ]
            sign = Fraction(1, 1) if col % 2 == 0 else Fraction(-1, 1)
            det = det + sign * matrix[0][col] * \
                FractionMatrix._compute_determinant(submatrix)
        return det

    @property
    def determinant(self) -> "Fraction":
        if self.rows != self.cols:
            raise ValueError(
                "Определитель можно вычислить только для квадратных матриц")
        return FractionMatrix._compute_determinant(self.matrix)

    def __add__(self, other: "FractionMatrix") -> "FractionMatrix":
        if self.rows != other.rows or self.cols != other.cols:
            raise ValueError(
                "Для сложения матриц они должны иметь одинаковые размеры")
        result = [
            [self.matrix[i][j] + other.matrix[i][j] for j in range(self.cols)]
            for i in range(self.rows)
        ]
        return FractionMatrix(result)

    def __sub__(self, other: "FractionMatrix") -> "FractionMatrix":
        if self.rows != other.rows or self.cols != other.cols:
            raise ValueError(
                "Для вычитания матриц они должны иметь одинаковые размеры")
        result = [
            [self.matrix[i][j] - other.matrix[i][j] for j in range(self.cols)]
            for i in range(self.rows)
        ]
        return FractionMatrix(result)

    def __mul__(self, other: "FractionMatrix") -> "FractionMatrix":
        if self.cols != other.rows:
            raise ValueError(
                "Невозможно перемножить матрицы: число столбцов первой матрицы должно совпадать с числом строк второй")
        result = []
        for i in range(self.rows):
            row = []
            for j in range(other.cols):
                cell = Fraction(0, 1)
                for k in range(self.cols):
                    cell = cell + self.matrix[i][k] * other.matrix[k][j]
                row.append(cell)
            result.append(row)
        return FractionMatrix(result)

    def transpose(self) -> "FractionMatrix":

        transposed = [
            [self.matrix[i][j] for i in range(self.rows)]
            for j in range(self.cols)
        ]
        return FractionMatrix(transposed)

    @classmethod
    def identity(cls, n: int) -> "FractionMatrix":

        matrix = [
            [Fraction(1, 1) if i == j else Fraction(0, 1) for j in range(n)]
            for i in range(n)
        ]
        return cls(matrix)

    @staticmethod
    def are_same_dimensions(m1: "FractionMatrix", m2: "FractionMatrix") -> bool:
        return m1.rows == m2.rows and m1.cols == m2.cols


m1 = FractionMatrix([
    [Fraction(1, 2), Fraction(1, 3)],
    [Fraction(2, 5), Fraction(3, 4)]
])
m2 = FractionMatrix([
    [Fraction(1, 3), Fraction(2, 3)],
    [Fraction(1, 2), Fraction(2, 5)]
])

print("m1 + m2:")
print(m1 + m2)
print("\nm1 * m2:")
print(m1 * m2)
print("\nОпределитель m1:")
print(m1.determinant)
print("\nТранспонированная m1:")
print(m1.transpose())
